import { useEffect, useState, type SetStateAction, type Dispatch } from 'react';
import '../../styles/templates/weekly-grid.css';
import { getRequest } from '../../utils/RequestUtils';
import type { Workout } from '../../types/workout';

export default function WeeklyGrid() {

  // Temporary hard coded data
  const days = ['Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat', 'Sun'];

  const [workoutNames, setWorkoutNames] = useState<string[]>([]);
  const [exerciseNames, setExerciseNames] = useState<string[][]>([]);

  useEffect(() => {
    fetchWorkouts();
  }, []);

  function getTodayIndex() {
    const today = new Date();
    return today.getDay()-1; // -1 to offset for base 0
  };

  async function fetchWorkouts() {
    try {
      const response = (await getRequest('/mock/workouts')) as Workout[];

      let wkoutNames = [];
      let eNames: string[][] = [];
      for (let i = 0; i < 7; i++) {
        wkoutNames.push(response[0].name);
        eNames.push([response[0].exercises[0].exercise.name || "-"]);
      }
      console.log(eNames);
      setWorkoutNames(wkoutNames);
      setExerciseNames(eNames);

    } catch (error) {
      console.log("An error occurred");
      console.log(error);
    }
  };

  return (
    <>
      <table className="weekly-grid-table">
        <thead className="weekly-grid-table-header">
          {
            days.map((day, index) => (
              <th className={(index == getTodayIndex() ? "highlight-text" : "")}>{day}</th>
            ))
          }
        
        <tr>
        {/* List of exercise names per day*/}
        {
          workoutNames.map((names) => (
            <th>{names}</th>
          ))
        }
        </tr>
        </thead>

        <tbody>
            {/* Code for mapping each array of exercises into a column is generated by ChatGPT*/}
            {Array.from({ length: 6 }).map((_, rowIndex) => (
            <tr key={rowIndex}>
              
              {exerciseNames.map((colArray, colIndex) => (
                <td key={colIndex} className="weekly-grid-table-list">
                  {colArray[rowIndex] === undefined ? "" : `${rowIndex+1}.`} {colArray[rowIndex]}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </>
  );
};
