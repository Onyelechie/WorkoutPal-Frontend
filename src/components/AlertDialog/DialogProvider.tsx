import { useState, type ReactNode } from "react";
import { DialogContext } from "./dialogContext";
import { AlertDialog } from "./AlertDialog";
import { ConfirmDialog } from "./ConfirmDialog";

type AlertDialogState = {
  isOpen: boolean;
  title: string;
  message: string;
};

/**
 * Shows/Hides a dialog in the current page.
 * 
 * ----
 * 
 * Parameter (Props or Properties): children (a type of ReactNode), which is just the <App /> component.
 * 
 */
export function DialogProvider({ children }: { children: ReactNode }) {
  // Generated by ChatGPT
  // https://www.youtube.com/watch?v=n7xQVRpYHYY
  const [isAlert, setIsAlert] = useState(false);
  const [dialog, setDialog] = useState<AlertDialogState>({
    isOpen: false,
    title: "",
    message: "",
  });
  const [dialogButton, setDialogButton] = useState("");
  const [resolveConfirm, setResolveConfirm] = useState<(value: boolean) => void>(() => () => { });


  /**
   * Usage: showAlert(title, message)
   * @param title title of the dialog
   * @param message the content
   */
  function showAlert(title: string, message: string) {
    // this will trigger a re-render
    setDialog({ isOpen: true, title, message });
    setIsAlert(true);
  }

  function showConfirm(title: string, message: string, positiveBtn: string, negativeBtn: string) {
    setDialog({ isOpen: true, title, message })
    setDialogButton(positiveBtn);
    setIsAlert(false);
    return new Promise<boolean>((resolve) => {
      setResolveConfirm(() => resolve); // store resolver
    });
  }

  function handleConfirm(result?: boolean) {
    handleClose();

    if (typeof result === "boolean") {
      resolveConfirm(result);
    }
  }

  function handleClose() {
    setDialog((prev) => ({ ...prev, isOpen: false }));
    // this is just setDialog ( {title: unchanged, message: unchanged, isOpen: false} )
  }

  return (
    // Anything wrapped inside this proivder will have access to showAlert
    <DialogContext.Provider value={{ showAlert, showConfirm }}>
      {children} {/* Entire app. children is <App /> Component. Check "/src/main.tsx" */}

      {/* Dialog */}
      {
        dialog.isOpen &&
        isAlert && (
          <>
            {/* very elegant */}
            {/* pass the title, message and handleClose function via props (Properties)*/}
            <AlertDialog title={dialog.title} message={dialog.message} handleClose={handleClose} />
          </>
        )
      }

      {
        dialog.isOpen &&
        !isAlert && (
          <ConfirmDialog title={dialog.title} message={dialog.message} handleConfirm={handleConfirm} postiveBtn={dialogButton} negativeBtn={"No"} />
        )

      }
    </DialogContext.Provider>
  );
}
