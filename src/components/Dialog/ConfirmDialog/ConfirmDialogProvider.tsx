import { useState, type ReactNode } from "react";
import { ConfirmDialog } from "./ConfirmDialog";
import { ConfirmDialogContext } from "./ConfirmDialogContext";

const inititalState = {
    isOpen: false,
    title: "",
    message: "",
    positiveBtn: "",
    negativeBtn: ""
};

type ConfirmDialogState = {
    isOpen: boolean;
    title: string;
    message: string;
    positiveBtn: string; // when positive button is clicked -> showConfirm() returns true
    negativeBtn: string; // when negative button is clicked -> showConfirm() returns false
};

// Button colors
const positiveColorRisky = "#c52525ff"
const positiveColorSafe = "#2da848ff"


export function ConfirmDialogProvider({ children }: { children: ReactNode }) {
    const [dialog, setDialog] = useState<ConfirmDialogState>(inititalState);
    const [positiveBtnColor, setPostiveBtnColor] = useState<string>("");
    // Promise implementation generated by ChatGPT
    const [resolveConfirm, setResolveConfirm] = useState<(value: boolean) => void>(() => () => { });

    /**
     * A general (2-button) Confirm Dialog.
     * @param title 
     * @param message 
     * @param positiveBtn - the "Yes / Confirm" button
     * @param negativeBtn  - the "No / Cancel" button
     * @returns boolean true when positive button is clicked, false when negative button is clicked
     */
    function showConfirm(title: string, message: string, positiveBtn: string, negativeBtn: string) {
        setDialog({ isOpen: true, title, message, positiveBtn, negativeBtn })
        return new Promise<boolean>((resolve) => {
            setResolveConfirm(() => resolve); // store resolver
        });
    }


    /**
     * A (2-button) Confirm Dialog for 'destructive' actions. Positive button is colored 'Red'
     * @param title 
     * @param message 
     * @param positiveBtn - the "Yes / Confirm" button
     * @param negativeBtn  - the "No / Cancel" button
     * @returns boolean true when positive button is clicked, false when negative button is clicked
     */
    function showConfirmRisky(title: string, message: string, positiveBtn: string, negativeBtn: string) {
        setPostiveBtnColor(positiveColorRisky);
        return showConfirm(title, message, positiveBtn, negativeBtn);

    }


    /**
     * A (2-button) Confirm Dialog for 'safe' actions. Positive button is colored 'Green'
     * @param title 
     * @param message 
     * @param positiveBtn - the "Yes / Confirm" button
     * @param negativeBtn  - the "No / Cancel" button
     * @returns boolean true when positive button is clicked, false when negative button is clicked
     */
    function showConfirmSafe(title: string, message: string, positiveBtn: string, negativeBtn: string) {
        setPostiveBtnColor(positiveColorSafe);
        return showConfirm(title, message, positiveBtn, negativeBtn);

    }


    function handleClose() {
        // empty the dialog state
        setDialog(inititalState);
    }


    function handleConfirm(result?: boolean) {
        handleClose();

        if (typeof result === "boolean") {
            resolveConfirm(result);
        }
    }

    return (
        <ConfirmDialogContext.Provider value={{ showConfirm, showConfirmRisky, showConfirmSafe }}>
            {children}

            {/* Dialog */}
            {dialog.isOpen && (
                <>
                    {/* pass the title, message and handleClose function via props (Properties)*/}
                    <ConfirmDialog
                        title={dialog.title}
                        message={dialog.message}
                        strPositiveButton={dialog.positiveBtn}
                        color={positiveBtnColor}
                        strNegativeButton={dialog.negativeBtn}
                        handleConfirm={handleConfirm}
                    />
                </>
            )}
        </ConfirmDialogContext.Provider>
    )
}